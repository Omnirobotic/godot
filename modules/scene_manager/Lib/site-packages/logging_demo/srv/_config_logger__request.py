# generated from rosidl_generator_py/resource/_msg.py.em
# generated code does not contain a copyright notice

from copy import copy
import logging
import traceback


class Metaclass(type):
    """Metaclass of message 'ConfigLogger_Request'."""

    _CREATE_ROS_MESSAGE = None
    _CONVERT_FROM_PY = None
    _CONVERT_TO_PY = None
    _DESTROY_ROS_MESSAGE = None
    _TYPE_SUPPORT = None

    __constants = {
    }

    @classmethod
    def __import_type_support__(cls):
        try:
            from rosidl_generator_py import import_type_support
            module = import_type_support('logging_demo')
        except ImportError:
            logger = logging.getLogger('rosidl_generator_py.ConfigLogger_Request')
            logger.debug(
                'Failed to import needed modules for type support:\n' + traceback.format_exc())
        else:
            cls._CREATE_ROS_MESSAGE = module.create_ros_message_msg__srv_config_logger__request
            cls._CONVERT_FROM_PY = module.convert_from_py_msg__srv_config_logger__request
            cls._CONVERT_TO_PY = module.convert_to_py_msg__srv_config_logger__request
            cls._TYPE_SUPPORT = module.type_support_msg__srv_config_logger__request
            cls._DESTROY_ROS_MESSAGE = module.destroy_ros_message_msg__srv_config_logger__request

    @classmethod
    def __prepare__(cls, name, bases, **kwargs):
        # list constant names here so that they appear in the help text of
        # the message class under "Data and other attributes defined here:"
        # as well as populate each message instance
        return {
        }


class ConfigLogger_Request(metaclass=Metaclass):
    """Message class 'ConfigLogger_Request'."""

    __slots__ = [
        '_logger_name',
        '_level',
    ]

    _fields_and_field_types = {
        'logger_name': 'string',
        'level': 'string',
    }

    def __init__(self, **kwargs):
        assert all('_' + key in self.__slots__ for key in kwargs.keys()), \
            'Invalid arguments passed to constructor: %s' % \
            ', '.join(sorted(k for k in kwargs.keys() if '_' + k not in self.__slots__))
        self.logger_name = kwargs.get('logger_name', str())
        self.level = kwargs.get('level', str())

    def __repr__(self):
        typename = self.__class__.__module__.split('.')
        typename.pop()
        typename.append(self.__class__.__name__)
        args = [s[1:] + '=' + repr(getattr(self, s, None)) for s in self.__slots__]
        return '%s(%s)' % ('.'.join(typename), ', '.join(args))

    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        if self.logger_name != other.logger_name:
            return False
        if self.level != other.level:
            return False
        return True

    @classmethod
    def get_fields_and_field_types(cls):
        return copy(cls._fields_and_field_types)

    @property
    def logger_name(self):
        """Message field 'logger_name'."""
        return self._logger_name

    @logger_name.setter
    def logger_name(self, value):
        if __debug__:
            assert \
                isinstance(value, str), \
                "The 'logger_name' field must of type 'str'"
        self._logger_name = value

    @property
    def level(self):
        """Message field 'level'."""
        return self._level

    @level.setter
    def level(self, value):
        if __debug__:
            assert \
                isinstance(value, str), \
                "The 'level' field must of type 'str'"
        self._level = value
