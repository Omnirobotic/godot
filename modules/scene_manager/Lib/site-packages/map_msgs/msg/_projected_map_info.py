# generated from rosidl_generator_py/resource/_msg.py.em
# generated code does not contain a copyright notice

from copy import copy
import logging
import traceback


class Metaclass(type):
    """Metaclass of message 'ProjectedMapInfo'."""

    _CREATE_ROS_MESSAGE = None
    _CONVERT_FROM_PY = None
    _CONVERT_TO_PY = None
    _DESTROY_ROS_MESSAGE = None
    _TYPE_SUPPORT = None

    __constants = {
    }

    @classmethod
    def __import_type_support__(cls):
        try:
            from rosidl_generator_py import import_type_support
            module = import_type_support('map_msgs')
        except ImportError:
            logger = logging.getLogger('rosidl_generator_py.ProjectedMapInfo')
            logger.debug(
                'Failed to import needed modules for type support:\n' + traceback.format_exc())
        else:
            cls._CREATE_ROS_MESSAGE = module.create_ros_message_msg__msg_projected_map_info
            cls._CONVERT_FROM_PY = module.convert_from_py_msg__msg_projected_map_info
            cls._CONVERT_TO_PY = module.convert_to_py_msg__msg_projected_map_info
            cls._TYPE_SUPPORT = module.type_support_msg__msg_projected_map_info
            cls._DESTROY_ROS_MESSAGE = module.destroy_ros_message_msg__msg_projected_map_info

    @classmethod
    def __prepare__(cls, name, bases, **kwargs):
        # list constant names here so that they appear in the help text of
        # the message class under "Data and other attributes defined here:"
        # as well as populate each message instance
        return {
        }


class ProjectedMapInfo(metaclass=Metaclass):
    """Message class 'ProjectedMapInfo'."""

    __slots__ = [
        '_frame_id',
        '_x',
        '_y',
        '_width',
        '_height',
        '_min_z',
        '_max_z',
    ]

    _fields_and_field_types = {
        'frame_id': 'string',
        'x': 'float64',
        'y': 'float64',
        'width': 'float64',
        'height': 'float64',
        'min_z': 'float64',
        'max_z': 'float64',
    }

    def __init__(self, **kwargs):
        assert all('_' + key in self.__slots__ for key in kwargs.keys()), \
            'Invalid arguments passed to constructor: %s' % \
            ', '.join(sorted(k for k in kwargs.keys() if '_' + k not in self.__slots__))
        self.frame_id = kwargs.get('frame_id', str())
        self.x = kwargs.get('x', float())
        self.y = kwargs.get('y', float())
        self.width = kwargs.get('width', float())
        self.height = kwargs.get('height', float())
        self.min_z = kwargs.get('min_z', float())
        self.max_z = kwargs.get('max_z', float())

    def __repr__(self):
        typename = self.__class__.__module__.split('.')
        typename.pop()
        typename.append(self.__class__.__name__)
        args = [s[1:] + '=' + repr(getattr(self, s, None)) for s in self.__slots__]
        return '%s(%s)' % ('.'.join(typename), ', '.join(args))

    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        if self.frame_id != other.frame_id:
            return False
        if self.x != other.x:
            return False
        if self.y != other.y:
            return False
        if self.width != other.width:
            return False
        if self.height != other.height:
            return False
        if self.min_z != other.min_z:
            return False
        if self.max_z != other.max_z:
            return False
        return True

    @classmethod
    def get_fields_and_field_types(cls):
        return copy(cls._fields_and_field_types)

    @property
    def frame_id(self):
        """Message field 'frame_id'."""
        return self._frame_id

    @frame_id.setter
    def frame_id(self, value):
        if __debug__:
            assert \
                isinstance(value, str), \
                "The 'frame_id' field must of type 'str'"
        self._frame_id = value

    @property
    def x(self):
        """Message field 'x'."""
        return self._x

    @x.setter
    def x(self, value):
        if __debug__:
            assert \
                isinstance(value, float), \
                "The 'x' field must of type 'float'"
        self._x = value

    @property
    def y(self):
        """Message field 'y'."""
        return self._y

    @y.setter
    def y(self, value):
        if __debug__:
            assert \
                isinstance(value, float), \
                "The 'y' field must of type 'float'"
        self._y = value

    @property
    def width(self):
        """Message field 'width'."""
        return self._width

    @width.setter
    def width(self, value):
        if __debug__:
            assert \
                isinstance(value, float), \
                "The 'width' field must of type 'float'"
        self._width = value

    @property
    def height(self):
        """Message field 'height'."""
        return self._height

    @height.setter
    def height(self, value):
        if __debug__:
            assert \
                isinstance(value, float), \
                "The 'height' field must of type 'float'"
        self._height = value

    @property
    def min_z(self):
        """Message field 'min_z'."""
        return self._min_z

    @min_z.setter
    def min_z(self, value):
        if __debug__:
            assert \
                isinstance(value, float), \
                "The 'min_z' field must of type 'float'"
        self._min_z = value

    @property
    def max_z(self):
        """Message field 'max_z'."""
        return self._max_z

    @max_z.setter
    def max_z(self, value):
        if __debug__:
            assert \
                isinstance(value, float), \
                "The 'max_z' field must of type 'float'"
        self._max_z = value
