// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scene-manager-interface.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_scene_2dmanager_2dinterface_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_scene_2dmanager_2dinterface_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_scene_2dmanager_2dinterface_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_scene_2dmanager_2dinterface_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[10]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_scene_2dmanager_2dinterface_2eproto;
namespace aos {
namespace ipc {
namespace scene_manager {
class AddMeshRequest;
class AddMeshRequestDefaultTypeInternal;
extern AddMeshRequestDefaultTypeInternal _AddMeshRequest_default_instance_;
class AddMeshResponse;
class AddMeshResponseDefaultTypeInternal;
extern AddMeshResponseDefaultTypeInternal _AddMeshResponse_default_instance_;
class DocumentInfo;
class DocumentInfoDefaultTypeInternal;
extern DocumentInfoDefaultTypeInternal _DocumentInfo_default_instance_;
class GetStateRequest;
class GetStateRequestDefaultTypeInternal;
extern GetStateRequestDefaultTypeInternal _GetStateRequest_default_instance_;
class GetStateResponse;
class GetStateResponseDefaultTypeInternal;
extern GetStateResponseDefaultTypeInternal _GetStateResponse_default_instance_;
class IosUpdate;
class IosUpdateDefaultTypeInternal;
extern IosUpdateDefaultTypeInternal _IosUpdate_default_instance_;
class JointsUpdate;
class JointsUpdateDefaultTypeInternal;
extern JointsUpdateDefaultTypeInternal _JointsUpdate_default_instance_;
class ObjectsUpdate;
class ObjectsUpdateDefaultTypeInternal;
extern ObjectsUpdateDefaultTypeInternal _ObjectsUpdate_default_instance_;
class RemoveMeshRequest;
class RemoveMeshRequestDefaultTypeInternal;
extern RemoveMeshRequestDefaultTypeInternal _RemoveMeshRequest_default_instance_;
class RemoveMeshResponse;
class RemoveMeshResponseDefaultTypeInternal;
extern RemoveMeshResponseDefaultTypeInternal _RemoveMeshResponse_default_instance_;
}  // namespace scene_manager
}  // namespace ipc
}  // namespace aos
PROTOBUF_NAMESPACE_OPEN
template<> ::aos::ipc::scene_manager::AddMeshRequest* Arena::CreateMaybeMessage<::aos::ipc::scene_manager::AddMeshRequest>(Arena*);
template<> ::aos::ipc::scene_manager::AddMeshResponse* Arena::CreateMaybeMessage<::aos::ipc::scene_manager::AddMeshResponse>(Arena*);
template<> ::aos::ipc::scene_manager::DocumentInfo* Arena::CreateMaybeMessage<::aos::ipc::scene_manager::DocumentInfo>(Arena*);
template<> ::aos::ipc::scene_manager::GetStateRequest* Arena::CreateMaybeMessage<::aos::ipc::scene_manager::GetStateRequest>(Arena*);
template<> ::aos::ipc::scene_manager::GetStateResponse* Arena::CreateMaybeMessage<::aos::ipc::scene_manager::GetStateResponse>(Arena*);
template<> ::aos::ipc::scene_manager::IosUpdate* Arena::CreateMaybeMessage<::aos::ipc::scene_manager::IosUpdate>(Arena*);
template<> ::aos::ipc::scene_manager::JointsUpdate* Arena::CreateMaybeMessage<::aos::ipc::scene_manager::JointsUpdate>(Arena*);
template<> ::aos::ipc::scene_manager::ObjectsUpdate* Arena::CreateMaybeMessage<::aos::ipc::scene_manager::ObjectsUpdate>(Arena*);
template<> ::aos::ipc::scene_manager::RemoveMeshRequest* Arena::CreateMaybeMessage<::aos::ipc::scene_manager::RemoveMeshRequest>(Arena*);
template<> ::aos::ipc::scene_manager::RemoveMeshResponse* Arena::CreateMaybeMessage<::aos::ipc::scene_manager::RemoveMeshResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace aos {
namespace ipc {
namespace scene_manager {

// ===================================================================

class DocumentInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aos.ipc.scene_manager.DocumentInfo) */ {
 public:
  DocumentInfo();
  virtual ~DocumentInfo();

  DocumentInfo(const DocumentInfo& from);
  DocumentInfo(DocumentInfo&& from) noexcept
    : DocumentInfo() {
    *this = ::std::move(from);
  }

  inline DocumentInfo& operator=(const DocumentInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline DocumentInfo& operator=(DocumentInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DocumentInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DocumentInfo* internal_default_instance() {
    return reinterpret_cast<const DocumentInfo*>(
               &_DocumentInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DocumentInfo& a, DocumentInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(DocumentInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DocumentInfo* New() const final {
    return CreateMaybeMessage<DocumentInfo>(nullptr);
  }

  DocumentInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DocumentInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DocumentInfo& from);
  void MergeFrom(const DocumentInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DocumentInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aos.ipc.scene_manager.DocumentInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scene_2dmanager_2dinterface_2eproto);
    return ::descriptor_table_scene_2dmanager_2dinterface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStoreKeyFieldNumber = 1,
    kTypeNameFieldNumber = 2,
    kFormatNameFieldNumber = 3,
  };
  // string store_key = 1;
  void clear_store_key();
  const std::string& store_key() const;
  void set_store_key(const std::string& value);
  void set_store_key(std::string&& value);
  void set_store_key(const char* value);
  void set_store_key(const char* value, size_t size);
  std::string* mutable_store_key();
  std::string* release_store_key();
  void set_allocated_store_key(std::string* store_key);
  private:
  const std::string& _internal_store_key() const;
  void _internal_set_store_key(const std::string& value);
  std::string* _internal_mutable_store_key();
  public:

  // string type_name = 2;
  void clear_type_name();
  const std::string& type_name() const;
  void set_type_name(const std::string& value);
  void set_type_name(std::string&& value);
  void set_type_name(const char* value);
  void set_type_name(const char* value, size_t size);
  std::string* mutable_type_name();
  std::string* release_type_name();
  void set_allocated_type_name(std::string* type_name);
  private:
  const std::string& _internal_type_name() const;
  void _internal_set_type_name(const std::string& value);
  std::string* _internal_mutable_type_name();
  public:

  // string format_name = 3;
  void clear_format_name();
  const std::string& format_name() const;
  void set_format_name(const std::string& value);
  void set_format_name(std::string&& value);
  void set_format_name(const char* value);
  void set_format_name(const char* value, size_t size);
  std::string* mutable_format_name();
  std::string* release_format_name();
  void set_allocated_format_name(std::string* format_name);
  private:
  const std::string& _internal_format_name() const;
  void _internal_set_format_name(const std::string& value);
  std::string* _internal_mutable_format_name();
  public:

  // @@protoc_insertion_point(class_scope:aos.ipc.scene_manager.DocumentInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr store_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr format_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scene_2dmanager_2dinterface_2eproto;
};
// -------------------------------------------------------------------

class IosUpdate :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aos.ipc.scene_manager.IosUpdate) */ {
 public:
  IosUpdate();
  virtual ~IosUpdate();

  IosUpdate(const IosUpdate& from);
  IosUpdate(IosUpdate&& from) noexcept
    : IosUpdate() {
    *this = ::std::move(from);
  }

  inline IosUpdate& operator=(const IosUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline IosUpdate& operator=(IosUpdate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IosUpdate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IosUpdate* internal_default_instance() {
    return reinterpret_cast<const IosUpdate*>(
               &_IosUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(IosUpdate& a, IosUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(IosUpdate* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IosUpdate* New() const final {
    return CreateMaybeMessage<IosUpdate>(nullptr);
  }

  IosUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IosUpdate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IosUpdate& from);
  void MergeFrom(const IosUpdate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IosUpdate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aos.ipc.scene_manager.IosUpdate";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scene_2dmanager_2dinterface_2eproto);
    return ::descriptor_table_scene_2dmanager_2dinterface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIosNameFieldNumber = 1,
    kIosValueFieldNumber = 2,
  };
  // repeated string ios_name = 1;
  int ios_name_size() const;
  private:
  int _internal_ios_name_size() const;
  public:
  void clear_ios_name();
  const std::string& ios_name(int index) const;
  std::string* mutable_ios_name(int index);
  void set_ios_name(int index, const std::string& value);
  void set_ios_name(int index, std::string&& value);
  void set_ios_name(int index, const char* value);
  void set_ios_name(int index, const char* value, size_t size);
  std::string* add_ios_name();
  void add_ios_name(const std::string& value);
  void add_ios_name(std::string&& value);
  void add_ios_name(const char* value);
  void add_ios_name(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& ios_name() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_ios_name();
  private:
  const std::string& _internal_ios_name(int index) const;
  std::string* _internal_add_ios_name();
  public:

  // repeated bool ios_value = 2;
  int ios_value_size() const;
  private:
  int _internal_ios_value_size() const;
  public:
  void clear_ios_value();
  private:
  bool _internal_ios_value(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      _internal_ios_value() const;
  void _internal_add_ios_value(bool value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      _internal_mutable_ios_value();
  public:
  bool ios_value(int index) const;
  void set_ios_value(int index, bool value);
  void add_ios_value(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      ios_value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_ios_value();

  // @@protoc_insertion_point(class_scope:aos.ipc.scene_manager.IosUpdate)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> ios_name_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > ios_value_;
  mutable std::atomic<int> _ios_value_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scene_2dmanager_2dinterface_2eproto;
};
// -------------------------------------------------------------------

class JointsUpdate :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aos.ipc.scene_manager.JointsUpdate) */ {
 public:
  JointsUpdate();
  virtual ~JointsUpdate();

  JointsUpdate(const JointsUpdate& from);
  JointsUpdate(JointsUpdate&& from) noexcept
    : JointsUpdate() {
    *this = ::std::move(from);
  }

  inline JointsUpdate& operator=(const JointsUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline JointsUpdate& operator=(JointsUpdate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const JointsUpdate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JointsUpdate* internal_default_instance() {
    return reinterpret_cast<const JointsUpdate*>(
               &_JointsUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(JointsUpdate& a, JointsUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(JointsUpdate* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline JointsUpdate* New() const final {
    return CreateMaybeMessage<JointsUpdate>(nullptr);
  }

  JointsUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JointsUpdate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const JointsUpdate& from);
  void MergeFrom(const JointsUpdate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JointsUpdate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aos.ipc.scene_manager.JointsUpdate";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scene_2dmanager_2dinterface_2eproto);
    return ::descriptor_table_scene_2dmanager_2dinterface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kJointsNameFieldNumber = 1,
    kJointsValueFieldNumber = 2,
  };
  // repeated string joints_name = 1;
  int joints_name_size() const;
  private:
  int _internal_joints_name_size() const;
  public:
  void clear_joints_name();
  const std::string& joints_name(int index) const;
  std::string* mutable_joints_name(int index);
  void set_joints_name(int index, const std::string& value);
  void set_joints_name(int index, std::string&& value);
  void set_joints_name(int index, const char* value);
  void set_joints_name(int index, const char* value, size_t size);
  std::string* add_joints_name();
  void add_joints_name(const std::string& value);
  void add_joints_name(std::string&& value);
  void add_joints_name(const char* value);
  void add_joints_name(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& joints_name() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_joints_name();
  private:
  const std::string& _internal_joints_name(int index) const;
  std::string* _internal_add_joints_name();
  public:

  // repeated double joints_value = 2;
  int joints_value_size() const;
  private:
  int _internal_joints_value_size() const;
  public:
  void clear_joints_value();
  private:
  double _internal_joints_value(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_joints_value() const;
  void _internal_add_joints_value(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_joints_value();
  public:
  double joints_value(int index) const;
  void set_joints_value(int index, double value);
  void add_joints_value(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      joints_value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_joints_value();

  // @@protoc_insertion_point(class_scope:aos.ipc.scene_manager.JointsUpdate)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> joints_name_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > joints_value_;
  mutable std::atomic<int> _joints_value_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scene_2dmanager_2dinterface_2eproto;
};
// -------------------------------------------------------------------

class ObjectsUpdate :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aos.ipc.scene_manager.ObjectsUpdate) */ {
 public:
  ObjectsUpdate();
  virtual ~ObjectsUpdate();

  ObjectsUpdate(const ObjectsUpdate& from);
  ObjectsUpdate(ObjectsUpdate&& from) noexcept
    : ObjectsUpdate() {
    *this = ::std::move(from);
  }

  inline ObjectsUpdate& operator=(const ObjectsUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectsUpdate& operator=(ObjectsUpdate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ObjectsUpdate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ObjectsUpdate* internal_default_instance() {
    return reinterpret_cast<const ObjectsUpdate*>(
               &_ObjectsUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ObjectsUpdate& a, ObjectsUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectsUpdate* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObjectsUpdate* New() const final {
    return CreateMaybeMessage<ObjectsUpdate>(nullptr);
  }

  ObjectsUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObjectsUpdate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ObjectsUpdate& from);
  void MergeFrom(const ObjectsUpdate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectsUpdate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aos.ipc.scene_manager.ObjectsUpdate";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scene_2dmanager_2dinterface_2eproto);
    return ::descriptor_table_scene_2dmanager_2dinterface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddedObjectNameFieldNumber = 1,
    kAddedObjectParentNameFieldNumber = 2,
    kRemovedObjectNameFieldNumber = 4,
    kRemovedObjectParentNameFieldNumber = 5,
    kAddedObjectDocumentInfoFieldNumber = 3,
  };
  // string added_object_name = 1;
  void clear_added_object_name();
  const std::string& added_object_name() const;
  void set_added_object_name(const std::string& value);
  void set_added_object_name(std::string&& value);
  void set_added_object_name(const char* value);
  void set_added_object_name(const char* value, size_t size);
  std::string* mutable_added_object_name();
  std::string* release_added_object_name();
  void set_allocated_added_object_name(std::string* added_object_name);
  private:
  const std::string& _internal_added_object_name() const;
  void _internal_set_added_object_name(const std::string& value);
  std::string* _internal_mutable_added_object_name();
  public:

  // string added_object_parent_name = 2;
  void clear_added_object_parent_name();
  const std::string& added_object_parent_name() const;
  void set_added_object_parent_name(const std::string& value);
  void set_added_object_parent_name(std::string&& value);
  void set_added_object_parent_name(const char* value);
  void set_added_object_parent_name(const char* value, size_t size);
  std::string* mutable_added_object_parent_name();
  std::string* release_added_object_parent_name();
  void set_allocated_added_object_parent_name(std::string* added_object_parent_name);
  private:
  const std::string& _internal_added_object_parent_name() const;
  void _internal_set_added_object_parent_name(const std::string& value);
  std::string* _internal_mutable_added_object_parent_name();
  public:

  // string removed_object_name = 4;
  void clear_removed_object_name();
  const std::string& removed_object_name() const;
  void set_removed_object_name(const std::string& value);
  void set_removed_object_name(std::string&& value);
  void set_removed_object_name(const char* value);
  void set_removed_object_name(const char* value, size_t size);
  std::string* mutable_removed_object_name();
  std::string* release_removed_object_name();
  void set_allocated_removed_object_name(std::string* removed_object_name);
  private:
  const std::string& _internal_removed_object_name() const;
  void _internal_set_removed_object_name(const std::string& value);
  std::string* _internal_mutable_removed_object_name();
  public:

  // string removed_object_parent_name = 5;
  void clear_removed_object_parent_name();
  const std::string& removed_object_parent_name() const;
  void set_removed_object_parent_name(const std::string& value);
  void set_removed_object_parent_name(std::string&& value);
  void set_removed_object_parent_name(const char* value);
  void set_removed_object_parent_name(const char* value, size_t size);
  std::string* mutable_removed_object_parent_name();
  std::string* release_removed_object_parent_name();
  void set_allocated_removed_object_parent_name(std::string* removed_object_parent_name);
  private:
  const std::string& _internal_removed_object_parent_name() const;
  void _internal_set_removed_object_parent_name(const std::string& value);
  std::string* _internal_mutable_removed_object_parent_name();
  public:

  // .aos.ipc.scene_manager.DocumentInfo added_object_document_info = 3;
  bool has_added_object_document_info() const;
  private:
  bool _internal_has_added_object_document_info() const;
  public:
  void clear_added_object_document_info();
  const ::aos::ipc::scene_manager::DocumentInfo& added_object_document_info() const;
  ::aos::ipc::scene_manager::DocumentInfo* release_added_object_document_info();
  ::aos::ipc::scene_manager::DocumentInfo* mutable_added_object_document_info();
  void set_allocated_added_object_document_info(::aos::ipc::scene_manager::DocumentInfo* added_object_document_info);
  private:
  const ::aos::ipc::scene_manager::DocumentInfo& _internal_added_object_document_info() const;
  ::aos::ipc::scene_manager::DocumentInfo* _internal_mutable_added_object_document_info();
  public:

  // @@protoc_insertion_point(class_scope:aos.ipc.scene_manager.ObjectsUpdate)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr added_object_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr added_object_parent_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr removed_object_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr removed_object_parent_name_;
  ::aos::ipc::scene_manager::DocumentInfo* added_object_document_info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scene_2dmanager_2dinterface_2eproto;
};
// -------------------------------------------------------------------

class AddMeshRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aos.ipc.scene_manager.AddMeshRequest) */ {
 public:
  AddMeshRequest();
  virtual ~AddMeshRequest();

  AddMeshRequest(const AddMeshRequest& from);
  AddMeshRequest(AddMeshRequest&& from) noexcept
    : AddMeshRequest() {
    *this = ::std::move(from);
  }

  inline AddMeshRequest& operator=(const AddMeshRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddMeshRequest& operator=(AddMeshRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddMeshRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddMeshRequest* internal_default_instance() {
    return reinterpret_cast<const AddMeshRequest*>(
               &_AddMeshRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(AddMeshRequest& a, AddMeshRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddMeshRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddMeshRequest* New() const final {
    return CreateMaybeMessage<AddMeshRequest>(nullptr);
  }

  AddMeshRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddMeshRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddMeshRequest& from);
  void MergeFrom(const AddMeshRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddMeshRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aos.ipc.scene_manager.AddMeshRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scene_2dmanager_2dinterface_2eproto);
    return ::descriptor_table_scene_2dmanager_2dinterface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSceneObjectNameFieldNumber = 1,
    kParentObjectNameFieldNumber = 3,
    kDocumentInfoFieldNumber = 2,
  };
  // string scene_object_name = 1;
  void clear_scene_object_name();
  const std::string& scene_object_name() const;
  void set_scene_object_name(const std::string& value);
  void set_scene_object_name(std::string&& value);
  void set_scene_object_name(const char* value);
  void set_scene_object_name(const char* value, size_t size);
  std::string* mutable_scene_object_name();
  std::string* release_scene_object_name();
  void set_allocated_scene_object_name(std::string* scene_object_name);
  private:
  const std::string& _internal_scene_object_name() const;
  void _internal_set_scene_object_name(const std::string& value);
  std::string* _internal_mutable_scene_object_name();
  public:

  // string parent_object_name = 3;
  void clear_parent_object_name();
  const std::string& parent_object_name() const;
  void set_parent_object_name(const std::string& value);
  void set_parent_object_name(std::string&& value);
  void set_parent_object_name(const char* value);
  void set_parent_object_name(const char* value, size_t size);
  std::string* mutable_parent_object_name();
  std::string* release_parent_object_name();
  void set_allocated_parent_object_name(std::string* parent_object_name);
  private:
  const std::string& _internal_parent_object_name() const;
  void _internal_set_parent_object_name(const std::string& value);
  std::string* _internal_mutable_parent_object_name();
  public:

  // .aos.ipc.scene_manager.DocumentInfo document_info = 2;
  bool has_document_info() const;
  private:
  bool _internal_has_document_info() const;
  public:
  void clear_document_info();
  const ::aos::ipc::scene_manager::DocumentInfo& document_info() const;
  ::aos::ipc::scene_manager::DocumentInfo* release_document_info();
  ::aos::ipc::scene_manager::DocumentInfo* mutable_document_info();
  void set_allocated_document_info(::aos::ipc::scene_manager::DocumentInfo* document_info);
  private:
  const ::aos::ipc::scene_manager::DocumentInfo& _internal_document_info() const;
  ::aos::ipc::scene_manager::DocumentInfo* _internal_mutable_document_info();
  public:

  // @@protoc_insertion_point(class_scope:aos.ipc.scene_manager.AddMeshRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scene_object_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_object_name_;
  ::aos::ipc::scene_manager::DocumentInfo* document_info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scene_2dmanager_2dinterface_2eproto;
};
// -------------------------------------------------------------------

class AddMeshResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aos.ipc.scene_manager.AddMeshResponse) */ {
 public:
  AddMeshResponse();
  virtual ~AddMeshResponse();

  AddMeshResponse(const AddMeshResponse& from);
  AddMeshResponse(AddMeshResponse&& from) noexcept
    : AddMeshResponse() {
    *this = ::std::move(from);
  }

  inline AddMeshResponse& operator=(const AddMeshResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddMeshResponse& operator=(AddMeshResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddMeshResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddMeshResponse* internal_default_instance() {
    return reinterpret_cast<const AddMeshResponse*>(
               &_AddMeshResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(AddMeshResponse& a, AddMeshResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AddMeshResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddMeshResponse* New() const final {
    return CreateMaybeMessage<AddMeshResponse>(nullptr);
  }

  AddMeshResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddMeshResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddMeshResponse& from);
  void MergeFrom(const AddMeshResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddMeshResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aos.ipc.scene_manager.AddMeshResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scene_2dmanager_2dinterface_2eproto);
    return ::descriptor_table_scene_2dmanager_2dinterface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:aos.ipc.scene_manager.AddMeshResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scene_2dmanager_2dinterface_2eproto;
};
// -------------------------------------------------------------------

class GetStateRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aos.ipc.scene_manager.GetStateRequest) */ {
 public:
  GetStateRequest();
  virtual ~GetStateRequest();

  GetStateRequest(const GetStateRequest& from);
  GetStateRequest(GetStateRequest&& from) noexcept
    : GetStateRequest() {
    *this = ::std::move(from);
  }

  inline GetStateRequest& operator=(const GetStateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetStateRequest& operator=(GetStateRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetStateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetStateRequest* internal_default_instance() {
    return reinterpret_cast<const GetStateRequest*>(
               &_GetStateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GetStateRequest& a, GetStateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetStateRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetStateRequest* New() const final {
    return CreateMaybeMessage<GetStateRequest>(nullptr);
  }

  GetStateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetStateRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetStateRequest& from);
  void MergeFrom(const GetStateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetStateRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aos.ipc.scene_manager.GetStateRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scene_2dmanager_2dinterface_2eproto);
    return ::descriptor_table_scene_2dmanager_2dinterface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:aos.ipc.scene_manager.GetStateRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scene_2dmanager_2dinterface_2eproto;
};
// -------------------------------------------------------------------

class GetStateResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aos.ipc.scene_manager.GetStateResponse) */ {
 public:
  GetStateResponse();
  virtual ~GetStateResponse();

  GetStateResponse(const GetStateResponse& from);
  GetStateResponse(GetStateResponse&& from) noexcept
    : GetStateResponse() {
    *this = ::std::move(from);
  }

  inline GetStateResponse& operator=(const GetStateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetStateResponse& operator=(GetStateResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetStateResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetStateResponse* internal_default_instance() {
    return reinterpret_cast<const GetStateResponse*>(
               &_GetStateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GetStateResponse& a, GetStateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetStateResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetStateResponse* New() const final {
    return CreateMaybeMessage<GetStateResponse>(nullptr);
  }

  GetStateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetStateResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetStateResponse& from);
  void MergeFrom(const GetStateResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetStateResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aos.ipc.scene_manager.GetStateResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scene_2dmanager_2dinterface_2eproto);
    return ::descriptor_table_scene_2dmanager_2dinterface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectsNameFieldNumber = 1,
    kObjectsParentNameFieldNumber = 2,
    kObjectsDocumentInfoFieldNumber = 3,
  };
  // repeated string objects_name = 1;
  int objects_name_size() const;
  private:
  int _internal_objects_name_size() const;
  public:
  void clear_objects_name();
  const std::string& objects_name(int index) const;
  std::string* mutable_objects_name(int index);
  void set_objects_name(int index, const std::string& value);
  void set_objects_name(int index, std::string&& value);
  void set_objects_name(int index, const char* value);
  void set_objects_name(int index, const char* value, size_t size);
  std::string* add_objects_name();
  void add_objects_name(const std::string& value);
  void add_objects_name(std::string&& value);
  void add_objects_name(const char* value);
  void add_objects_name(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& objects_name() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_objects_name();
  private:
  const std::string& _internal_objects_name(int index) const;
  std::string* _internal_add_objects_name();
  public:

  // repeated string objects_parent_name = 2;
  int objects_parent_name_size() const;
  private:
  int _internal_objects_parent_name_size() const;
  public:
  void clear_objects_parent_name();
  const std::string& objects_parent_name(int index) const;
  std::string* mutable_objects_parent_name(int index);
  void set_objects_parent_name(int index, const std::string& value);
  void set_objects_parent_name(int index, std::string&& value);
  void set_objects_parent_name(int index, const char* value);
  void set_objects_parent_name(int index, const char* value, size_t size);
  std::string* add_objects_parent_name();
  void add_objects_parent_name(const std::string& value);
  void add_objects_parent_name(std::string&& value);
  void add_objects_parent_name(const char* value);
  void add_objects_parent_name(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& objects_parent_name() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_objects_parent_name();
  private:
  const std::string& _internal_objects_parent_name(int index) const;
  std::string* _internal_add_objects_parent_name();
  public:

  // repeated .aos.ipc.scene_manager.DocumentInfo objects_document_info = 3;
  int objects_document_info_size() const;
  private:
  int _internal_objects_document_info_size() const;
  public:
  void clear_objects_document_info();
  ::aos::ipc::scene_manager::DocumentInfo* mutable_objects_document_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aos::ipc::scene_manager::DocumentInfo >*
      mutable_objects_document_info();
  private:
  const ::aos::ipc::scene_manager::DocumentInfo& _internal_objects_document_info(int index) const;
  ::aos::ipc::scene_manager::DocumentInfo* _internal_add_objects_document_info();
  public:
  const ::aos::ipc::scene_manager::DocumentInfo& objects_document_info(int index) const;
  ::aos::ipc::scene_manager::DocumentInfo* add_objects_document_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aos::ipc::scene_manager::DocumentInfo >&
      objects_document_info() const;

  // @@protoc_insertion_point(class_scope:aos.ipc.scene_manager.GetStateResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> objects_name_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> objects_parent_name_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aos::ipc::scene_manager::DocumentInfo > objects_document_info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scene_2dmanager_2dinterface_2eproto;
};
// -------------------------------------------------------------------

class RemoveMeshRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aos.ipc.scene_manager.RemoveMeshRequest) */ {
 public:
  RemoveMeshRequest();
  virtual ~RemoveMeshRequest();

  RemoveMeshRequest(const RemoveMeshRequest& from);
  RemoveMeshRequest(RemoveMeshRequest&& from) noexcept
    : RemoveMeshRequest() {
    *this = ::std::move(from);
  }

  inline RemoveMeshRequest& operator=(const RemoveMeshRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveMeshRequest& operator=(RemoveMeshRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemoveMeshRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveMeshRequest* internal_default_instance() {
    return reinterpret_cast<const RemoveMeshRequest*>(
               &_RemoveMeshRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(RemoveMeshRequest& a, RemoveMeshRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveMeshRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoveMeshRequest* New() const final {
    return CreateMaybeMessage<RemoveMeshRequest>(nullptr);
  }

  RemoveMeshRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoveMeshRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemoveMeshRequest& from);
  void MergeFrom(const RemoveMeshRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveMeshRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aos.ipc.scene_manager.RemoveMeshRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scene_2dmanager_2dinterface_2eproto);
    return ::descriptor_table_scene_2dmanager_2dinterface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSceneObjectNameFieldNumber = 1,
  };
  // string scene_object_name = 1;
  void clear_scene_object_name();
  const std::string& scene_object_name() const;
  void set_scene_object_name(const std::string& value);
  void set_scene_object_name(std::string&& value);
  void set_scene_object_name(const char* value);
  void set_scene_object_name(const char* value, size_t size);
  std::string* mutable_scene_object_name();
  std::string* release_scene_object_name();
  void set_allocated_scene_object_name(std::string* scene_object_name);
  private:
  const std::string& _internal_scene_object_name() const;
  void _internal_set_scene_object_name(const std::string& value);
  std::string* _internal_mutable_scene_object_name();
  public:

  // @@protoc_insertion_point(class_scope:aos.ipc.scene_manager.RemoveMeshRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scene_object_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scene_2dmanager_2dinterface_2eproto;
};
// -------------------------------------------------------------------

class RemoveMeshResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aos.ipc.scene_manager.RemoveMeshResponse) */ {
 public:
  RemoveMeshResponse();
  virtual ~RemoveMeshResponse();

  RemoveMeshResponse(const RemoveMeshResponse& from);
  RemoveMeshResponse(RemoveMeshResponse&& from) noexcept
    : RemoveMeshResponse() {
    *this = ::std::move(from);
  }

  inline RemoveMeshResponse& operator=(const RemoveMeshResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveMeshResponse& operator=(RemoveMeshResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemoveMeshResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveMeshResponse* internal_default_instance() {
    return reinterpret_cast<const RemoveMeshResponse*>(
               &_RemoveMeshResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(RemoveMeshResponse& a, RemoveMeshResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveMeshResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoveMeshResponse* New() const final {
    return CreateMaybeMessage<RemoveMeshResponse>(nullptr);
  }

  RemoveMeshResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoveMeshResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemoveMeshResponse& from);
  void MergeFrom(const RemoveMeshResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveMeshResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aos.ipc.scene_manager.RemoveMeshResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scene_2dmanager_2dinterface_2eproto);
    return ::descriptor_table_scene_2dmanager_2dinterface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:aos.ipc.scene_manager.RemoveMeshResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scene_2dmanager_2dinterface_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DocumentInfo

// string store_key = 1;
inline void DocumentInfo::clear_store_key() {
  store_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DocumentInfo::store_key() const {
  // @@protoc_insertion_point(field_get:aos.ipc.scene_manager.DocumentInfo.store_key)
  return _internal_store_key();
}
inline void DocumentInfo::set_store_key(const std::string& value) {
  _internal_set_store_key(value);
  // @@protoc_insertion_point(field_set:aos.ipc.scene_manager.DocumentInfo.store_key)
}
inline std::string* DocumentInfo::mutable_store_key() {
  // @@protoc_insertion_point(field_mutable:aos.ipc.scene_manager.DocumentInfo.store_key)
  return _internal_mutable_store_key();
}
inline const std::string& DocumentInfo::_internal_store_key() const {
  return store_key_.GetNoArena();
}
inline void DocumentInfo::_internal_set_store_key(const std::string& value) {
  
  store_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DocumentInfo::set_store_key(std::string&& value) {
  
  store_key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aos.ipc.scene_manager.DocumentInfo.store_key)
}
inline void DocumentInfo::set_store_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  store_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aos.ipc.scene_manager.DocumentInfo.store_key)
}
inline void DocumentInfo::set_store_key(const char* value, size_t size) {
  
  store_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aos.ipc.scene_manager.DocumentInfo.store_key)
}
inline std::string* DocumentInfo::_internal_mutable_store_key() {
  
  return store_key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DocumentInfo::release_store_key() {
  // @@protoc_insertion_point(field_release:aos.ipc.scene_manager.DocumentInfo.store_key)
  
  return store_key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DocumentInfo::set_allocated_store_key(std::string* store_key) {
  if (store_key != nullptr) {
    
  } else {
    
  }
  store_key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), store_key);
  // @@protoc_insertion_point(field_set_allocated:aos.ipc.scene_manager.DocumentInfo.store_key)
}

// string type_name = 2;
inline void DocumentInfo::clear_type_name() {
  type_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DocumentInfo::type_name() const {
  // @@protoc_insertion_point(field_get:aos.ipc.scene_manager.DocumentInfo.type_name)
  return _internal_type_name();
}
inline void DocumentInfo::set_type_name(const std::string& value) {
  _internal_set_type_name(value);
  // @@protoc_insertion_point(field_set:aos.ipc.scene_manager.DocumentInfo.type_name)
}
inline std::string* DocumentInfo::mutable_type_name() {
  // @@protoc_insertion_point(field_mutable:aos.ipc.scene_manager.DocumentInfo.type_name)
  return _internal_mutable_type_name();
}
inline const std::string& DocumentInfo::_internal_type_name() const {
  return type_name_.GetNoArena();
}
inline void DocumentInfo::_internal_set_type_name(const std::string& value) {
  
  type_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DocumentInfo::set_type_name(std::string&& value) {
  
  type_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aos.ipc.scene_manager.DocumentInfo.type_name)
}
inline void DocumentInfo::set_type_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aos.ipc.scene_manager.DocumentInfo.type_name)
}
inline void DocumentInfo::set_type_name(const char* value, size_t size) {
  
  type_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aos.ipc.scene_manager.DocumentInfo.type_name)
}
inline std::string* DocumentInfo::_internal_mutable_type_name() {
  
  return type_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DocumentInfo::release_type_name() {
  // @@protoc_insertion_point(field_release:aos.ipc.scene_manager.DocumentInfo.type_name)
  
  return type_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DocumentInfo::set_allocated_type_name(std::string* type_name) {
  if (type_name != nullptr) {
    
  } else {
    
  }
  type_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type_name);
  // @@protoc_insertion_point(field_set_allocated:aos.ipc.scene_manager.DocumentInfo.type_name)
}

// string format_name = 3;
inline void DocumentInfo::clear_format_name() {
  format_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DocumentInfo::format_name() const {
  // @@protoc_insertion_point(field_get:aos.ipc.scene_manager.DocumentInfo.format_name)
  return _internal_format_name();
}
inline void DocumentInfo::set_format_name(const std::string& value) {
  _internal_set_format_name(value);
  // @@protoc_insertion_point(field_set:aos.ipc.scene_manager.DocumentInfo.format_name)
}
inline std::string* DocumentInfo::mutable_format_name() {
  // @@protoc_insertion_point(field_mutable:aos.ipc.scene_manager.DocumentInfo.format_name)
  return _internal_mutable_format_name();
}
inline const std::string& DocumentInfo::_internal_format_name() const {
  return format_name_.GetNoArena();
}
inline void DocumentInfo::_internal_set_format_name(const std::string& value) {
  
  format_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DocumentInfo::set_format_name(std::string&& value) {
  
  format_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aos.ipc.scene_manager.DocumentInfo.format_name)
}
inline void DocumentInfo::set_format_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  format_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aos.ipc.scene_manager.DocumentInfo.format_name)
}
inline void DocumentInfo::set_format_name(const char* value, size_t size) {
  
  format_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aos.ipc.scene_manager.DocumentInfo.format_name)
}
inline std::string* DocumentInfo::_internal_mutable_format_name() {
  
  return format_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DocumentInfo::release_format_name() {
  // @@protoc_insertion_point(field_release:aos.ipc.scene_manager.DocumentInfo.format_name)
  
  return format_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DocumentInfo::set_allocated_format_name(std::string* format_name) {
  if (format_name != nullptr) {
    
  } else {
    
  }
  format_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), format_name);
  // @@protoc_insertion_point(field_set_allocated:aos.ipc.scene_manager.DocumentInfo.format_name)
}

// -------------------------------------------------------------------

// IosUpdate

// repeated string ios_name = 1;
inline int IosUpdate::_internal_ios_name_size() const {
  return ios_name_.size();
}
inline int IosUpdate::ios_name_size() const {
  return _internal_ios_name_size();
}
inline void IosUpdate::clear_ios_name() {
  ios_name_.Clear();
}
inline std::string* IosUpdate::add_ios_name() {
  // @@protoc_insertion_point(field_add_mutable:aos.ipc.scene_manager.IosUpdate.ios_name)
  return _internal_add_ios_name();
}
inline const std::string& IosUpdate::_internal_ios_name(int index) const {
  return ios_name_.Get(index);
}
inline const std::string& IosUpdate::ios_name(int index) const {
  // @@protoc_insertion_point(field_get:aos.ipc.scene_manager.IosUpdate.ios_name)
  return _internal_ios_name(index);
}
inline std::string* IosUpdate::mutable_ios_name(int index) {
  // @@protoc_insertion_point(field_mutable:aos.ipc.scene_manager.IosUpdate.ios_name)
  return ios_name_.Mutable(index);
}
inline void IosUpdate::set_ios_name(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:aos.ipc.scene_manager.IosUpdate.ios_name)
  ios_name_.Mutable(index)->assign(value);
}
inline void IosUpdate::set_ios_name(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:aos.ipc.scene_manager.IosUpdate.ios_name)
  ios_name_.Mutable(index)->assign(std::move(value));
}
inline void IosUpdate::set_ios_name(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ios_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:aos.ipc.scene_manager.IosUpdate.ios_name)
}
inline void IosUpdate::set_ios_name(int index, const char* value, size_t size) {
  ios_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:aos.ipc.scene_manager.IosUpdate.ios_name)
}
inline std::string* IosUpdate::_internal_add_ios_name() {
  return ios_name_.Add();
}
inline void IosUpdate::add_ios_name(const std::string& value) {
  ios_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:aos.ipc.scene_manager.IosUpdate.ios_name)
}
inline void IosUpdate::add_ios_name(std::string&& value) {
  ios_name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:aos.ipc.scene_manager.IosUpdate.ios_name)
}
inline void IosUpdate::add_ios_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ios_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:aos.ipc.scene_manager.IosUpdate.ios_name)
}
inline void IosUpdate::add_ios_name(const char* value, size_t size) {
  ios_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:aos.ipc.scene_manager.IosUpdate.ios_name)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
IosUpdate::ios_name() const {
  // @@protoc_insertion_point(field_list:aos.ipc.scene_manager.IosUpdate.ios_name)
  return ios_name_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
IosUpdate::mutable_ios_name() {
  // @@protoc_insertion_point(field_mutable_list:aos.ipc.scene_manager.IosUpdate.ios_name)
  return &ios_name_;
}

// repeated bool ios_value = 2;
inline int IosUpdate::_internal_ios_value_size() const {
  return ios_value_.size();
}
inline int IosUpdate::ios_value_size() const {
  return _internal_ios_value_size();
}
inline void IosUpdate::clear_ios_value() {
  ios_value_.Clear();
}
inline bool IosUpdate::_internal_ios_value(int index) const {
  return ios_value_.Get(index);
}
inline bool IosUpdate::ios_value(int index) const {
  // @@protoc_insertion_point(field_get:aos.ipc.scene_manager.IosUpdate.ios_value)
  return _internal_ios_value(index);
}
inline void IosUpdate::set_ios_value(int index, bool value) {
  ios_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:aos.ipc.scene_manager.IosUpdate.ios_value)
}
inline void IosUpdate::_internal_add_ios_value(bool value) {
  ios_value_.Add(value);
}
inline void IosUpdate::add_ios_value(bool value) {
  _internal_add_ios_value(value);
  // @@protoc_insertion_point(field_add:aos.ipc.scene_manager.IosUpdate.ios_value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
IosUpdate::_internal_ios_value() const {
  return ios_value_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
IosUpdate::ios_value() const {
  // @@protoc_insertion_point(field_list:aos.ipc.scene_manager.IosUpdate.ios_value)
  return _internal_ios_value();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
IosUpdate::_internal_mutable_ios_value() {
  return &ios_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
IosUpdate::mutable_ios_value() {
  // @@protoc_insertion_point(field_mutable_list:aos.ipc.scene_manager.IosUpdate.ios_value)
  return _internal_mutable_ios_value();
}

// -------------------------------------------------------------------

// JointsUpdate

// repeated string joints_name = 1;
inline int JointsUpdate::_internal_joints_name_size() const {
  return joints_name_.size();
}
inline int JointsUpdate::joints_name_size() const {
  return _internal_joints_name_size();
}
inline void JointsUpdate::clear_joints_name() {
  joints_name_.Clear();
}
inline std::string* JointsUpdate::add_joints_name() {
  // @@protoc_insertion_point(field_add_mutable:aos.ipc.scene_manager.JointsUpdate.joints_name)
  return _internal_add_joints_name();
}
inline const std::string& JointsUpdate::_internal_joints_name(int index) const {
  return joints_name_.Get(index);
}
inline const std::string& JointsUpdate::joints_name(int index) const {
  // @@protoc_insertion_point(field_get:aos.ipc.scene_manager.JointsUpdate.joints_name)
  return _internal_joints_name(index);
}
inline std::string* JointsUpdate::mutable_joints_name(int index) {
  // @@protoc_insertion_point(field_mutable:aos.ipc.scene_manager.JointsUpdate.joints_name)
  return joints_name_.Mutable(index);
}
inline void JointsUpdate::set_joints_name(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:aos.ipc.scene_manager.JointsUpdate.joints_name)
  joints_name_.Mutable(index)->assign(value);
}
inline void JointsUpdate::set_joints_name(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:aos.ipc.scene_manager.JointsUpdate.joints_name)
  joints_name_.Mutable(index)->assign(std::move(value));
}
inline void JointsUpdate::set_joints_name(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  joints_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:aos.ipc.scene_manager.JointsUpdate.joints_name)
}
inline void JointsUpdate::set_joints_name(int index, const char* value, size_t size) {
  joints_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:aos.ipc.scene_manager.JointsUpdate.joints_name)
}
inline std::string* JointsUpdate::_internal_add_joints_name() {
  return joints_name_.Add();
}
inline void JointsUpdate::add_joints_name(const std::string& value) {
  joints_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:aos.ipc.scene_manager.JointsUpdate.joints_name)
}
inline void JointsUpdate::add_joints_name(std::string&& value) {
  joints_name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:aos.ipc.scene_manager.JointsUpdate.joints_name)
}
inline void JointsUpdate::add_joints_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  joints_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:aos.ipc.scene_manager.JointsUpdate.joints_name)
}
inline void JointsUpdate::add_joints_name(const char* value, size_t size) {
  joints_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:aos.ipc.scene_manager.JointsUpdate.joints_name)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
JointsUpdate::joints_name() const {
  // @@protoc_insertion_point(field_list:aos.ipc.scene_manager.JointsUpdate.joints_name)
  return joints_name_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
JointsUpdate::mutable_joints_name() {
  // @@protoc_insertion_point(field_mutable_list:aos.ipc.scene_manager.JointsUpdate.joints_name)
  return &joints_name_;
}

// repeated double joints_value = 2;
inline int JointsUpdate::_internal_joints_value_size() const {
  return joints_value_.size();
}
inline int JointsUpdate::joints_value_size() const {
  return _internal_joints_value_size();
}
inline void JointsUpdate::clear_joints_value() {
  joints_value_.Clear();
}
inline double JointsUpdate::_internal_joints_value(int index) const {
  return joints_value_.Get(index);
}
inline double JointsUpdate::joints_value(int index) const {
  // @@protoc_insertion_point(field_get:aos.ipc.scene_manager.JointsUpdate.joints_value)
  return _internal_joints_value(index);
}
inline void JointsUpdate::set_joints_value(int index, double value) {
  joints_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:aos.ipc.scene_manager.JointsUpdate.joints_value)
}
inline void JointsUpdate::_internal_add_joints_value(double value) {
  joints_value_.Add(value);
}
inline void JointsUpdate::add_joints_value(double value) {
  _internal_add_joints_value(value);
  // @@protoc_insertion_point(field_add:aos.ipc.scene_manager.JointsUpdate.joints_value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
JointsUpdate::_internal_joints_value() const {
  return joints_value_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
JointsUpdate::joints_value() const {
  // @@protoc_insertion_point(field_list:aos.ipc.scene_manager.JointsUpdate.joints_value)
  return _internal_joints_value();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
JointsUpdate::_internal_mutable_joints_value() {
  return &joints_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
JointsUpdate::mutable_joints_value() {
  // @@protoc_insertion_point(field_mutable_list:aos.ipc.scene_manager.JointsUpdate.joints_value)
  return _internal_mutable_joints_value();
}

// -------------------------------------------------------------------

// ObjectsUpdate

// string added_object_name = 1;
inline void ObjectsUpdate::clear_added_object_name() {
  added_object_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ObjectsUpdate::added_object_name() const {
  // @@protoc_insertion_point(field_get:aos.ipc.scene_manager.ObjectsUpdate.added_object_name)
  return _internal_added_object_name();
}
inline void ObjectsUpdate::set_added_object_name(const std::string& value) {
  _internal_set_added_object_name(value);
  // @@protoc_insertion_point(field_set:aos.ipc.scene_manager.ObjectsUpdate.added_object_name)
}
inline std::string* ObjectsUpdate::mutable_added_object_name() {
  // @@protoc_insertion_point(field_mutable:aos.ipc.scene_manager.ObjectsUpdate.added_object_name)
  return _internal_mutable_added_object_name();
}
inline const std::string& ObjectsUpdate::_internal_added_object_name() const {
  return added_object_name_.GetNoArena();
}
inline void ObjectsUpdate::_internal_set_added_object_name(const std::string& value) {
  
  added_object_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ObjectsUpdate::set_added_object_name(std::string&& value) {
  
  added_object_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aos.ipc.scene_manager.ObjectsUpdate.added_object_name)
}
inline void ObjectsUpdate::set_added_object_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  added_object_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aos.ipc.scene_manager.ObjectsUpdate.added_object_name)
}
inline void ObjectsUpdate::set_added_object_name(const char* value, size_t size) {
  
  added_object_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aos.ipc.scene_manager.ObjectsUpdate.added_object_name)
}
inline std::string* ObjectsUpdate::_internal_mutable_added_object_name() {
  
  return added_object_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ObjectsUpdate::release_added_object_name() {
  // @@protoc_insertion_point(field_release:aos.ipc.scene_manager.ObjectsUpdate.added_object_name)
  
  return added_object_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ObjectsUpdate::set_allocated_added_object_name(std::string* added_object_name) {
  if (added_object_name != nullptr) {
    
  } else {
    
  }
  added_object_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), added_object_name);
  // @@protoc_insertion_point(field_set_allocated:aos.ipc.scene_manager.ObjectsUpdate.added_object_name)
}

// string added_object_parent_name = 2;
inline void ObjectsUpdate::clear_added_object_parent_name() {
  added_object_parent_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ObjectsUpdate::added_object_parent_name() const {
  // @@protoc_insertion_point(field_get:aos.ipc.scene_manager.ObjectsUpdate.added_object_parent_name)
  return _internal_added_object_parent_name();
}
inline void ObjectsUpdate::set_added_object_parent_name(const std::string& value) {
  _internal_set_added_object_parent_name(value);
  // @@protoc_insertion_point(field_set:aos.ipc.scene_manager.ObjectsUpdate.added_object_parent_name)
}
inline std::string* ObjectsUpdate::mutable_added_object_parent_name() {
  // @@protoc_insertion_point(field_mutable:aos.ipc.scene_manager.ObjectsUpdate.added_object_parent_name)
  return _internal_mutable_added_object_parent_name();
}
inline const std::string& ObjectsUpdate::_internal_added_object_parent_name() const {
  return added_object_parent_name_.GetNoArena();
}
inline void ObjectsUpdate::_internal_set_added_object_parent_name(const std::string& value) {
  
  added_object_parent_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ObjectsUpdate::set_added_object_parent_name(std::string&& value) {
  
  added_object_parent_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aos.ipc.scene_manager.ObjectsUpdate.added_object_parent_name)
}
inline void ObjectsUpdate::set_added_object_parent_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  added_object_parent_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aos.ipc.scene_manager.ObjectsUpdate.added_object_parent_name)
}
inline void ObjectsUpdate::set_added_object_parent_name(const char* value, size_t size) {
  
  added_object_parent_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aos.ipc.scene_manager.ObjectsUpdate.added_object_parent_name)
}
inline std::string* ObjectsUpdate::_internal_mutable_added_object_parent_name() {
  
  return added_object_parent_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ObjectsUpdate::release_added_object_parent_name() {
  // @@protoc_insertion_point(field_release:aos.ipc.scene_manager.ObjectsUpdate.added_object_parent_name)
  
  return added_object_parent_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ObjectsUpdate::set_allocated_added_object_parent_name(std::string* added_object_parent_name) {
  if (added_object_parent_name != nullptr) {
    
  } else {
    
  }
  added_object_parent_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), added_object_parent_name);
  // @@protoc_insertion_point(field_set_allocated:aos.ipc.scene_manager.ObjectsUpdate.added_object_parent_name)
}

// .aos.ipc.scene_manager.DocumentInfo added_object_document_info = 3;
inline bool ObjectsUpdate::_internal_has_added_object_document_info() const {
  return this != internal_default_instance() && added_object_document_info_ != nullptr;
}
inline bool ObjectsUpdate::has_added_object_document_info() const {
  return _internal_has_added_object_document_info();
}
inline void ObjectsUpdate::clear_added_object_document_info() {
  if (GetArenaNoVirtual() == nullptr && added_object_document_info_ != nullptr) {
    delete added_object_document_info_;
  }
  added_object_document_info_ = nullptr;
}
inline const ::aos::ipc::scene_manager::DocumentInfo& ObjectsUpdate::_internal_added_object_document_info() const {
  const ::aos::ipc::scene_manager::DocumentInfo* p = added_object_document_info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::aos::ipc::scene_manager::DocumentInfo*>(
      &::aos::ipc::scene_manager::_DocumentInfo_default_instance_);
}
inline const ::aos::ipc::scene_manager::DocumentInfo& ObjectsUpdate::added_object_document_info() const {
  // @@protoc_insertion_point(field_get:aos.ipc.scene_manager.ObjectsUpdate.added_object_document_info)
  return _internal_added_object_document_info();
}
inline ::aos::ipc::scene_manager::DocumentInfo* ObjectsUpdate::release_added_object_document_info() {
  // @@protoc_insertion_point(field_release:aos.ipc.scene_manager.ObjectsUpdate.added_object_document_info)
  
  ::aos::ipc::scene_manager::DocumentInfo* temp = added_object_document_info_;
  added_object_document_info_ = nullptr;
  return temp;
}
inline ::aos::ipc::scene_manager::DocumentInfo* ObjectsUpdate::_internal_mutable_added_object_document_info() {
  
  if (added_object_document_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::aos::ipc::scene_manager::DocumentInfo>(GetArenaNoVirtual());
    added_object_document_info_ = p;
  }
  return added_object_document_info_;
}
inline ::aos::ipc::scene_manager::DocumentInfo* ObjectsUpdate::mutable_added_object_document_info() {
  // @@protoc_insertion_point(field_mutable:aos.ipc.scene_manager.ObjectsUpdate.added_object_document_info)
  return _internal_mutable_added_object_document_info();
}
inline void ObjectsUpdate::set_allocated_added_object_document_info(::aos::ipc::scene_manager::DocumentInfo* added_object_document_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete added_object_document_info_;
  }
  if (added_object_document_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      added_object_document_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, added_object_document_info, submessage_arena);
    }
    
  } else {
    
  }
  added_object_document_info_ = added_object_document_info;
  // @@protoc_insertion_point(field_set_allocated:aos.ipc.scene_manager.ObjectsUpdate.added_object_document_info)
}

// string removed_object_name = 4;
inline void ObjectsUpdate::clear_removed_object_name() {
  removed_object_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ObjectsUpdate::removed_object_name() const {
  // @@protoc_insertion_point(field_get:aos.ipc.scene_manager.ObjectsUpdate.removed_object_name)
  return _internal_removed_object_name();
}
inline void ObjectsUpdate::set_removed_object_name(const std::string& value) {
  _internal_set_removed_object_name(value);
  // @@protoc_insertion_point(field_set:aos.ipc.scene_manager.ObjectsUpdate.removed_object_name)
}
inline std::string* ObjectsUpdate::mutable_removed_object_name() {
  // @@protoc_insertion_point(field_mutable:aos.ipc.scene_manager.ObjectsUpdate.removed_object_name)
  return _internal_mutable_removed_object_name();
}
inline const std::string& ObjectsUpdate::_internal_removed_object_name() const {
  return removed_object_name_.GetNoArena();
}
inline void ObjectsUpdate::_internal_set_removed_object_name(const std::string& value) {
  
  removed_object_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ObjectsUpdate::set_removed_object_name(std::string&& value) {
  
  removed_object_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aos.ipc.scene_manager.ObjectsUpdate.removed_object_name)
}
inline void ObjectsUpdate::set_removed_object_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  removed_object_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aos.ipc.scene_manager.ObjectsUpdate.removed_object_name)
}
inline void ObjectsUpdate::set_removed_object_name(const char* value, size_t size) {
  
  removed_object_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aos.ipc.scene_manager.ObjectsUpdate.removed_object_name)
}
inline std::string* ObjectsUpdate::_internal_mutable_removed_object_name() {
  
  return removed_object_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ObjectsUpdate::release_removed_object_name() {
  // @@protoc_insertion_point(field_release:aos.ipc.scene_manager.ObjectsUpdate.removed_object_name)
  
  return removed_object_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ObjectsUpdate::set_allocated_removed_object_name(std::string* removed_object_name) {
  if (removed_object_name != nullptr) {
    
  } else {
    
  }
  removed_object_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), removed_object_name);
  // @@protoc_insertion_point(field_set_allocated:aos.ipc.scene_manager.ObjectsUpdate.removed_object_name)
}

// string removed_object_parent_name = 5;
inline void ObjectsUpdate::clear_removed_object_parent_name() {
  removed_object_parent_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ObjectsUpdate::removed_object_parent_name() const {
  // @@protoc_insertion_point(field_get:aos.ipc.scene_manager.ObjectsUpdate.removed_object_parent_name)
  return _internal_removed_object_parent_name();
}
inline void ObjectsUpdate::set_removed_object_parent_name(const std::string& value) {
  _internal_set_removed_object_parent_name(value);
  // @@protoc_insertion_point(field_set:aos.ipc.scene_manager.ObjectsUpdate.removed_object_parent_name)
}
inline std::string* ObjectsUpdate::mutable_removed_object_parent_name() {
  // @@protoc_insertion_point(field_mutable:aos.ipc.scene_manager.ObjectsUpdate.removed_object_parent_name)
  return _internal_mutable_removed_object_parent_name();
}
inline const std::string& ObjectsUpdate::_internal_removed_object_parent_name() const {
  return removed_object_parent_name_.GetNoArena();
}
inline void ObjectsUpdate::_internal_set_removed_object_parent_name(const std::string& value) {
  
  removed_object_parent_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ObjectsUpdate::set_removed_object_parent_name(std::string&& value) {
  
  removed_object_parent_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aos.ipc.scene_manager.ObjectsUpdate.removed_object_parent_name)
}
inline void ObjectsUpdate::set_removed_object_parent_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  removed_object_parent_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aos.ipc.scene_manager.ObjectsUpdate.removed_object_parent_name)
}
inline void ObjectsUpdate::set_removed_object_parent_name(const char* value, size_t size) {
  
  removed_object_parent_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aos.ipc.scene_manager.ObjectsUpdate.removed_object_parent_name)
}
inline std::string* ObjectsUpdate::_internal_mutable_removed_object_parent_name() {
  
  return removed_object_parent_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ObjectsUpdate::release_removed_object_parent_name() {
  // @@protoc_insertion_point(field_release:aos.ipc.scene_manager.ObjectsUpdate.removed_object_parent_name)
  
  return removed_object_parent_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ObjectsUpdate::set_allocated_removed_object_parent_name(std::string* removed_object_parent_name) {
  if (removed_object_parent_name != nullptr) {
    
  } else {
    
  }
  removed_object_parent_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), removed_object_parent_name);
  // @@protoc_insertion_point(field_set_allocated:aos.ipc.scene_manager.ObjectsUpdate.removed_object_parent_name)
}

// -------------------------------------------------------------------

// AddMeshRequest

// string scene_object_name = 1;
inline void AddMeshRequest::clear_scene_object_name() {
  scene_object_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AddMeshRequest::scene_object_name() const {
  // @@protoc_insertion_point(field_get:aos.ipc.scene_manager.AddMeshRequest.scene_object_name)
  return _internal_scene_object_name();
}
inline void AddMeshRequest::set_scene_object_name(const std::string& value) {
  _internal_set_scene_object_name(value);
  // @@protoc_insertion_point(field_set:aos.ipc.scene_manager.AddMeshRequest.scene_object_name)
}
inline std::string* AddMeshRequest::mutable_scene_object_name() {
  // @@protoc_insertion_point(field_mutable:aos.ipc.scene_manager.AddMeshRequest.scene_object_name)
  return _internal_mutable_scene_object_name();
}
inline const std::string& AddMeshRequest::_internal_scene_object_name() const {
  return scene_object_name_.GetNoArena();
}
inline void AddMeshRequest::_internal_set_scene_object_name(const std::string& value) {
  
  scene_object_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AddMeshRequest::set_scene_object_name(std::string&& value) {
  
  scene_object_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aos.ipc.scene_manager.AddMeshRequest.scene_object_name)
}
inline void AddMeshRequest::set_scene_object_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  scene_object_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aos.ipc.scene_manager.AddMeshRequest.scene_object_name)
}
inline void AddMeshRequest::set_scene_object_name(const char* value, size_t size) {
  
  scene_object_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aos.ipc.scene_manager.AddMeshRequest.scene_object_name)
}
inline std::string* AddMeshRequest::_internal_mutable_scene_object_name() {
  
  return scene_object_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AddMeshRequest::release_scene_object_name() {
  // @@protoc_insertion_point(field_release:aos.ipc.scene_manager.AddMeshRequest.scene_object_name)
  
  return scene_object_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AddMeshRequest::set_allocated_scene_object_name(std::string* scene_object_name) {
  if (scene_object_name != nullptr) {
    
  } else {
    
  }
  scene_object_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), scene_object_name);
  // @@protoc_insertion_point(field_set_allocated:aos.ipc.scene_manager.AddMeshRequest.scene_object_name)
}

// .aos.ipc.scene_manager.DocumentInfo document_info = 2;
inline bool AddMeshRequest::_internal_has_document_info() const {
  return this != internal_default_instance() && document_info_ != nullptr;
}
inline bool AddMeshRequest::has_document_info() const {
  return _internal_has_document_info();
}
inline void AddMeshRequest::clear_document_info() {
  if (GetArenaNoVirtual() == nullptr && document_info_ != nullptr) {
    delete document_info_;
  }
  document_info_ = nullptr;
}
inline const ::aos::ipc::scene_manager::DocumentInfo& AddMeshRequest::_internal_document_info() const {
  const ::aos::ipc::scene_manager::DocumentInfo* p = document_info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::aos::ipc::scene_manager::DocumentInfo*>(
      &::aos::ipc::scene_manager::_DocumentInfo_default_instance_);
}
inline const ::aos::ipc::scene_manager::DocumentInfo& AddMeshRequest::document_info() const {
  // @@protoc_insertion_point(field_get:aos.ipc.scene_manager.AddMeshRequest.document_info)
  return _internal_document_info();
}
inline ::aos::ipc::scene_manager::DocumentInfo* AddMeshRequest::release_document_info() {
  // @@protoc_insertion_point(field_release:aos.ipc.scene_manager.AddMeshRequest.document_info)
  
  ::aos::ipc::scene_manager::DocumentInfo* temp = document_info_;
  document_info_ = nullptr;
  return temp;
}
inline ::aos::ipc::scene_manager::DocumentInfo* AddMeshRequest::_internal_mutable_document_info() {
  
  if (document_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::aos::ipc::scene_manager::DocumentInfo>(GetArenaNoVirtual());
    document_info_ = p;
  }
  return document_info_;
}
inline ::aos::ipc::scene_manager::DocumentInfo* AddMeshRequest::mutable_document_info() {
  // @@protoc_insertion_point(field_mutable:aos.ipc.scene_manager.AddMeshRequest.document_info)
  return _internal_mutable_document_info();
}
inline void AddMeshRequest::set_allocated_document_info(::aos::ipc::scene_manager::DocumentInfo* document_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete document_info_;
  }
  if (document_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      document_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, document_info, submessage_arena);
    }
    
  } else {
    
  }
  document_info_ = document_info;
  // @@protoc_insertion_point(field_set_allocated:aos.ipc.scene_manager.AddMeshRequest.document_info)
}

// string parent_object_name = 3;
inline void AddMeshRequest::clear_parent_object_name() {
  parent_object_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AddMeshRequest::parent_object_name() const {
  // @@protoc_insertion_point(field_get:aos.ipc.scene_manager.AddMeshRequest.parent_object_name)
  return _internal_parent_object_name();
}
inline void AddMeshRequest::set_parent_object_name(const std::string& value) {
  _internal_set_parent_object_name(value);
  // @@protoc_insertion_point(field_set:aos.ipc.scene_manager.AddMeshRequest.parent_object_name)
}
inline std::string* AddMeshRequest::mutable_parent_object_name() {
  // @@protoc_insertion_point(field_mutable:aos.ipc.scene_manager.AddMeshRequest.parent_object_name)
  return _internal_mutable_parent_object_name();
}
inline const std::string& AddMeshRequest::_internal_parent_object_name() const {
  return parent_object_name_.GetNoArena();
}
inline void AddMeshRequest::_internal_set_parent_object_name(const std::string& value) {
  
  parent_object_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AddMeshRequest::set_parent_object_name(std::string&& value) {
  
  parent_object_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aos.ipc.scene_manager.AddMeshRequest.parent_object_name)
}
inline void AddMeshRequest::set_parent_object_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  parent_object_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aos.ipc.scene_manager.AddMeshRequest.parent_object_name)
}
inline void AddMeshRequest::set_parent_object_name(const char* value, size_t size) {
  
  parent_object_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aos.ipc.scene_manager.AddMeshRequest.parent_object_name)
}
inline std::string* AddMeshRequest::_internal_mutable_parent_object_name() {
  
  return parent_object_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AddMeshRequest::release_parent_object_name() {
  // @@protoc_insertion_point(field_release:aos.ipc.scene_manager.AddMeshRequest.parent_object_name)
  
  return parent_object_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AddMeshRequest::set_allocated_parent_object_name(std::string* parent_object_name) {
  if (parent_object_name != nullptr) {
    
  } else {
    
  }
  parent_object_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent_object_name);
  // @@protoc_insertion_point(field_set_allocated:aos.ipc.scene_manager.AddMeshRequest.parent_object_name)
}

// -------------------------------------------------------------------

// AddMeshResponse

// -------------------------------------------------------------------

// GetStateRequest

// -------------------------------------------------------------------

// GetStateResponse

// repeated string objects_name = 1;
inline int GetStateResponse::_internal_objects_name_size() const {
  return objects_name_.size();
}
inline int GetStateResponse::objects_name_size() const {
  return _internal_objects_name_size();
}
inline void GetStateResponse::clear_objects_name() {
  objects_name_.Clear();
}
inline std::string* GetStateResponse::add_objects_name() {
  // @@protoc_insertion_point(field_add_mutable:aos.ipc.scene_manager.GetStateResponse.objects_name)
  return _internal_add_objects_name();
}
inline const std::string& GetStateResponse::_internal_objects_name(int index) const {
  return objects_name_.Get(index);
}
inline const std::string& GetStateResponse::objects_name(int index) const {
  // @@protoc_insertion_point(field_get:aos.ipc.scene_manager.GetStateResponse.objects_name)
  return _internal_objects_name(index);
}
inline std::string* GetStateResponse::mutable_objects_name(int index) {
  // @@protoc_insertion_point(field_mutable:aos.ipc.scene_manager.GetStateResponse.objects_name)
  return objects_name_.Mutable(index);
}
inline void GetStateResponse::set_objects_name(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:aos.ipc.scene_manager.GetStateResponse.objects_name)
  objects_name_.Mutable(index)->assign(value);
}
inline void GetStateResponse::set_objects_name(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:aos.ipc.scene_manager.GetStateResponse.objects_name)
  objects_name_.Mutable(index)->assign(std::move(value));
}
inline void GetStateResponse::set_objects_name(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  objects_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:aos.ipc.scene_manager.GetStateResponse.objects_name)
}
inline void GetStateResponse::set_objects_name(int index, const char* value, size_t size) {
  objects_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:aos.ipc.scene_manager.GetStateResponse.objects_name)
}
inline std::string* GetStateResponse::_internal_add_objects_name() {
  return objects_name_.Add();
}
inline void GetStateResponse::add_objects_name(const std::string& value) {
  objects_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:aos.ipc.scene_manager.GetStateResponse.objects_name)
}
inline void GetStateResponse::add_objects_name(std::string&& value) {
  objects_name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:aos.ipc.scene_manager.GetStateResponse.objects_name)
}
inline void GetStateResponse::add_objects_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  objects_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:aos.ipc.scene_manager.GetStateResponse.objects_name)
}
inline void GetStateResponse::add_objects_name(const char* value, size_t size) {
  objects_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:aos.ipc.scene_manager.GetStateResponse.objects_name)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetStateResponse::objects_name() const {
  // @@protoc_insertion_point(field_list:aos.ipc.scene_manager.GetStateResponse.objects_name)
  return objects_name_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetStateResponse::mutable_objects_name() {
  // @@protoc_insertion_point(field_mutable_list:aos.ipc.scene_manager.GetStateResponse.objects_name)
  return &objects_name_;
}

// repeated string objects_parent_name = 2;
inline int GetStateResponse::_internal_objects_parent_name_size() const {
  return objects_parent_name_.size();
}
inline int GetStateResponse::objects_parent_name_size() const {
  return _internal_objects_parent_name_size();
}
inline void GetStateResponse::clear_objects_parent_name() {
  objects_parent_name_.Clear();
}
inline std::string* GetStateResponse::add_objects_parent_name() {
  // @@protoc_insertion_point(field_add_mutable:aos.ipc.scene_manager.GetStateResponse.objects_parent_name)
  return _internal_add_objects_parent_name();
}
inline const std::string& GetStateResponse::_internal_objects_parent_name(int index) const {
  return objects_parent_name_.Get(index);
}
inline const std::string& GetStateResponse::objects_parent_name(int index) const {
  // @@protoc_insertion_point(field_get:aos.ipc.scene_manager.GetStateResponse.objects_parent_name)
  return _internal_objects_parent_name(index);
}
inline std::string* GetStateResponse::mutable_objects_parent_name(int index) {
  // @@protoc_insertion_point(field_mutable:aos.ipc.scene_manager.GetStateResponse.objects_parent_name)
  return objects_parent_name_.Mutable(index);
}
inline void GetStateResponse::set_objects_parent_name(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:aos.ipc.scene_manager.GetStateResponse.objects_parent_name)
  objects_parent_name_.Mutable(index)->assign(value);
}
inline void GetStateResponse::set_objects_parent_name(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:aos.ipc.scene_manager.GetStateResponse.objects_parent_name)
  objects_parent_name_.Mutable(index)->assign(std::move(value));
}
inline void GetStateResponse::set_objects_parent_name(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  objects_parent_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:aos.ipc.scene_manager.GetStateResponse.objects_parent_name)
}
inline void GetStateResponse::set_objects_parent_name(int index, const char* value, size_t size) {
  objects_parent_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:aos.ipc.scene_manager.GetStateResponse.objects_parent_name)
}
inline std::string* GetStateResponse::_internal_add_objects_parent_name() {
  return objects_parent_name_.Add();
}
inline void GetStateResponse::add_objects_parent_name(const std::string& value) {
  objects_parent_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:aos.ipc.scene_manager.GetStateResponse.objects_parent_name)
}
inline void GetStateResponse::add_objects_parent_name(std::string&& value) {
  objects_parent_name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:aos.ipc.scene_manager.GetStateResponse.objects_parent_name)
}
inline void GetStateResponse::add_objects_parent_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  objects_parent_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:aos.ipc.scene_manager.GetStateResponse.objects_parent_name)
}
inline void GetStateResponse::add_objects_parent_name(const char* value, size_t size) {
  objects_parent_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:aos.ipc.scene_manager.GetStateResponse.objects_parent_name)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetStateResponse::objects_parent_name() const {
  // @@protoc_insertion_point(field_list:aos.ipc.scene_manager.GetStateResponse.objects_parent_name)
  return objects_parent_name_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetStateResponse::mutable_objects_parent_name() {
  // @@protoc_insertion_point(field_mutable_list:aos.ipc.scene_manager.GetStateResponse.objects_parent_name)
  return &objects_parent_name_;
}

// repeated .aos.ipc.scene_manager.DocumentInfo objects_document_info = 3;
inline int GetStateResponse::_internal_objects_document_info_size() const {
  return objects_document_info_.size();
}
inline int GetStateResponse::objects_document_info_size() const {
  return _internal_objects_document_info_size();
}
inline void GetStateResponse::clear_objects_document_info() {
  objects_document_info_.Clear();
}
inline ::aos::ipc::scene_manager::DocumentInfo* GetStateResponse::mutable_objects_document_info(int index) {
  // @@protoc_insertion_point(field_mutable:aos.ipc.scene_manager.GetStateResponse.objects_document_info)
  return objects_document_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aos::ipc::scene_manager::DocumentInfo >*
GetStateResponse::mutable_objects_document_info() {
  // @@protoc_insertion_point(field_mutable_list:aos.ipc.scene_manager.GetStateResponse.objects_document_info)
  return &objects_document_info_;
}
inline const ::aos::ipc::scene_manager::DocumentInfo& GetStateResponse::_internal_objects_document_info(int index) const {
  return objects_document_info_.Get(index);
}
inline const ::aos::ipc::scene_manager::DocumentInfo& GetStateResponse::objects_document_info(int index) const {
  // @@protoc_insertion_point(field_get:aos.ipc.scene_manager.GetStateResponse.objects_document_info)
  return _internal_objects_document_info(index);
}
inline ::aos::ipc::scene_manager::DocumentInfo* GetStateResponse::_internal_add_objects_document_info() {
  return objects_document_info_.Add();
}
inline ::aos::ipc::scene_manager::DocumentInfo* GetStateResponse::add_objects_document_info() {
  // @@protoc_insertion_point(field_add:aos.ipc.scene_manager.GetStateResponse.objects_document_info)
  return _internal_add_objects_document_info();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aos::ipc::scene_manager::DocumentInfo >&
GetStateResponse::objects_document_info() const {
  // @@protoc_insertion_point(field_list:aos.ipc.scene_manager.GetStateResponse.objects_document_info)
  return objects_document_info_;
}

// -------------------------------------------------------------------

// RemoveMeshRequest

// string scene_object_name = 1;
inline void RemoveMeshRequest::clear_scene_object_name() {
  scene_object_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RemoveMeshRequest::scene_object_name() const {
  // @@protoc_insertion_point(field_get:aos.ipc.scene_manager.RemoveMeshRequest.scene_object_name)
  return _internal_scene_object_name();
}
inline void RemoveMeshRequest::set_scene_object_name(const std::string& value) {
  _internal_set_scene_object_name(value);
  // @@protoc_insertion_point(field_set:aos.ipc.scene_manager.RemoveMeshRequest.scene_object_name)
}
inline std::string* RemoveMeshRequest::mutable_scene_object_name() {
  // @@protoc_insertion_point(field_mutable:aos.ipc.scene_manager.RemoveMeshRequest.scene_object_name)
  return _internal_mutable_scene_object_name();
}
inline const std::string& RemoveMeshRequest::_internal_scene_object_name() const {
  return scene_object_name_.GetNoArena();
}
inline void RemoveMeshRequest::_internal_set_scene_object_name(const std::string& value) {
  
  scene_object_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RemoveMeshRequest::set_scene_object_name(std::string&& value) {
  
  scene_object_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aos.ipc.scene_manager.RemoveMeshRequest.scene_object_name)
}
inline void RemoveMeshRequest::set_scene_object_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  scene_object_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aos.ipc.scene_manager.RemoveMeshRequest.scene_object_name)
}
inline void RemoveMeshRequest::set_scene_object_name(const char* value, size_t size) {
  
  scene_object_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aos.ipc.scene_manager.RemoveMeshRequest.scene_object_name)
}
inline std::string* RemoveMeshRequest::_internal_mutable_scene_object_name() {
  
  return scene_object_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RemoveMeshRequest::release_scene_object_name() {
  // @@protoc_insertion_point(field_release:aos.ipc.scene_manager.RemoveMeshRequest.scene_object_name)
  
  return scene_object_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RemoveMeshRequest::set_allocated_scene_object_name(std::string* scene_object_name) {
  if (scene_object_name != nullptr) {
    
  } else {
    
  }
  scene_object_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), scene_object_name);
  // @@protoc_insertion_point(field_set_allocated:aos.ipc.scene_manager.RemoveMeshRequest.scene_object_name)
}

// -------------------------------------------------------------------

// RemoveMeshResponse

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace scene_manager
}  // namespace ipc
}  // namespace aos

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_scene_2dmanager_2dinterface_2eproto
