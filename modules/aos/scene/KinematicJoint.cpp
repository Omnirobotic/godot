#include "KinematicJoint.h"

namespace aos
{

KinematicJoint::KinematicJoint(real_t value, real_t max, real_t min, bool apply_value)
:   _joint_value(value),
    _joint_max_limit(max),
    _joint_min_limit(min),
    _apply_value_to_transform(apply_value)
{

}

KinematicJoint::~KinematicJoint()
{

}

void KinematicJoint::set_apply_value_to_transform(bool apply_value_to_transform)
{
    if(apply_value_to_transform != _apply_value_to_transform)
    {
        _apply_value_to_transform = apply_value_to_transform;

        if(_apply_value_to_transform)
        {
            _joint_transform = _compute_joint_transform();
            _update_global_transform();
        }
        else
        {
            _joint_transform = Transform();
            _update_global_transform();
        }
    }
}

bool KinematicJoint::get_apply_value_to_transform() const
{
    return _apply_value_to_transform;
}


void KinematicJoint::_update_global_transform()
{
    if(!get_apply_value_to_transform())
    {
        set_transform(Transform());
        return;
    }
    
    // update the transform generated by the KinematicJoint
    set_transform(_joint_transform);

    //_change_notify("translation");
}

void KinematicJoint::_bind_methods() {
    ClassDB::bind_method(D_METHOD("set_apply_value_to_transform", "apply"), &KinematicJoint::set_apply_value_to_transform);
    ClassDB::bind_method(D_METHOD("get_apply_value_to_transform"), &KinematicJoint::get_apply_value_to_transform);

    ADD_PROPERTY(PropertyInfo(Variant::BOOL, "Apply KinematicJoint Value"), "set_apply_value_to_transform", "get_apply_value_to_transform");
}

}