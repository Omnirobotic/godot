[gd_scene load_steps=6 format=2]

[ext_resource path="res://spray_length.gd" type="Script" id=1]

[sub_resource type="Shader" id=1]
code = "shader_type particles;
uniform int trail_divisor =1;

float rand_from_seed(inout uint seed) {
	int k;
	int s = int(seed);
	if (s == 0)
	{
	s = 305420679;
	k = s / 127773;
	s = 16807 * (s - k * 127773) - 2836 * k;
	}

	if (s < 0)
	{
	s += 2147483647;
	seed = uint(s);
	}

	return float(seed % uint(65536)) / 65535.0;
	}

uint hash(uint x) {
	x = ((x >> uint(16)) ^ x) * uint(73244475);
	x = ((x >> uint(16)) ^ x) * uint(73244475);
	x = (x >> uint(16)) ^ x;
	return x;
	}

void vertex() {
	uint base_number = NUMBER / uint(trail_divisor);
	uint alt_seed1 = hash(base_number + uint(1) + RANDOM_SEED);
	uint alt_seed2 = hash(base_number + uint(2) + RANDOM_SEED);
	uint alt_seed3 = hash(base_number + uint(3) + RANDOM_SEED);
	//float z = -1.0*(rand_from_seed(alt_seed1)+1.0);
	float z = 1.57*rand_from_seed(alt_seed1);
	float phi = 6.28*rand_from_seed(alt_seed2);
	
	
	float x_compo = cos(phi);
	float y_compo = 1.0/(cos(z)+0.001);
	float z_compo = sin(phi);
	// si on veut jet plat 
	float norm = y_compo;
	// si on veut jet courber
	//float norm = sqrt(x_compo*x_compo+y_compo*y_compo+z_compo*z_compo);
	VELOCITY = vec3(x_compo/(2.0*norm),y_compo/norm,z_compo/norm);
}"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )
shader_param/trail_divisor = 1

[sub_resource type="SpatialMaterial" id=3]
albedo_color = Color( 0.160784, 0.666667, 0.882353, 1 )
metallic = 1.0
roughness = 0.0

[sub_resource type="SphereMesh" id=4]
material = SubResource( 3 )
radius = 0.001
height = 0.001

[node name="cam" type="Camera"]
projection = 1
size = 5.0
script = ExtResource( 1 )

[node name="Particles" type="Particles" parent="."]
transform = Transform( 1, 3.44589e-08, 7.45058e-09, -2.23517e-08, -2.68221e-07, 1, 9.31323e-10, -1, -2.23517e-07, -0.0045042, 0, 0 )
amount = 100
lifetime = 0.44
fixed_fps = 30
process_material = SubResource( 2 )
draw_pass_1 = SubResource( 4 )
